<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.conwise.mapper.CanvasMapper">

    <resultMap id="CanvasListResultMap" type="com.conwise.model.Canvas">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="userName" column="user_name"/>
        <result property="title" column="title"/>
        <result property="description" column="description"/>
        <result property="thumbnailFileName" column="thumbnail_file_name"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="settings" column="settings" typeHandler="com.conwise.handler.JsonTypeHandler"/>
    </resultMap>
    <resultMap id="NodeResultMap" type="com.conwise.model.Node">
        <id property="id" column="id"/>
        <result property="type" column="type"/>
        <result property="position.x" column="position_x"/>
        <result property="position.y" column="position_y"/>
        <result property="data" column="data_json" typeHandler="com.conwise.handler.JsonTypeHandler"/>
        <result property="version" column="version"/>
    </resultMap>
    <resultMap id="edgeResultMap" type="Edge">
        <id property="id" column="id"/>
        <result property="type" column="type"/>
        <result property="source" column="source"/>
        <result property="target" column="target"/>
        <result property="animated" column="animated"/>
        <result property="sourceHandle" column="source_handle"/>
        <result property="targetHandle" column="target_handle"/>
        <result property="version" column="version"/>

        <!-- 使用自定义 TypeHandler 处理 data 字段 -->
        <result property="data" column="data_json"
                typeHandler="com.conwise.handler.JsonTypeHandler"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,user_id,user_name,title,description, thumbnail_file_name,created_at,updated_at,settings
    </sql>

    <resultMap id="CanvasResultMap" type="com.conwise.model.Canvas">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="title" column="title"/>
        <result property="description" column="description"/>
        <result property="thumbnailFileName" column="thumbnail_file_name"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="nodes" column="nodes" typeHandler="com.conwise.handler.NodeListTypeHandler"/>
        <result property="edges" column="edges" typeHandler="com.conwise.handler.EdgeListTypeHandler"/>
        <result property="settings" column="settings" typeHandler="com.conwise.handler.JsonTypeHandler"/>
    </resultMap>

    <sql id="Base_Column_List_including_nodes_edges">
        id,user_id,title,description, thumbnail_file_name,created_at,updated_at,nodes,edges,settings
    </sql>

    <select id="findById" resultMap="CanvasResultMap">
        SELECT
        <include refid="Base_Column_List_including_nodes_edges">
        </include>
        FROM
        canvases
        WHERE
        id = #{id}
    </select>

    <select id="findByUserId" resultMap="CanvasListResultMap">
        SELECT
        <include refid="Base_Column_List">
        </include>
        FROM
        canvases
        WHERE
        user_id = #{userId}
        ORDER BY
        updated_at DESC;
    </select>

    <select id="findByIdIn" resultType="com.conwise.model.Canvas">
        SELECT
        <include refid="Base_Column_List">
        </include>
        FROM
        canvases
        WHERE
        id IN
        <foreach item="id" collection="ids" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    <select id="getNode" resultMap="NodeResultMap">
        SELECT
            (elem ->> 'id')              AS id,
            (elem ->> 'type')            AS type,
            (elem -> 'position' ->> 'x')::float AS "position_x",
            (elem -> 'position' ->> 'y')::float AS "position_y",
            (elem -> 'data')::TExt AS "data_json",
            (elem ->> 'version')         AS version

        FROM
            public.canvases c,
            jsonb_array_elements(c.nodes) elem
        WHERE
              c.id = #{canvasId}
          AND elem ->> 'id' = #{nodeId}
    </select>
    <select id="getEdge" resultType="com.conwise.model.Edge">
        SELECT
        (elem->>'id') AS id,
        (elem->>'type') AS type,
        (elem->>'source') AS source,
        (elem->>'target') AS target,
        (elem->>'animated')::boolean AS animated,
        (elem->>'sourceHandle') AS source_handle,
        (elem->>'targetHandle') AS target_handle,

        <!-- 将 JSONB 转为字符串供 TypeHandler 处理 -->
        (elem->'data')::TEXT AS data_json,
        (elem ->> 'version')         AS version


        FROM public.canvases c,
        jsonb_array_elements(c.edges) elem
        WHERE c.id = #{canvasId}
        AND elem->>'id' = #{edgeId}
    </select>

    <insert id="insert" parameterType="com.conwise.model.Canvas" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO canvases (
        user_id,
        user_name
        <if test="title != null and title != ''">, title</if>
        <if test="description != null">, description</if>
        <if test="thumbnailFileName != null">, thumbnail_file_name</if>
        <if test="nodes != null">, nodes</if>
        <if test="edges != null">, edges</if>
        <if test="settings != null">, settings</if>
        ) VALUES (
        #{userId},
        #{userName}
        <if test="title != null and title != ''">, #{title}</if>
        <if test="description != null">, #{description}</if>
        <if test="thumbnailFileName != null">, #{thumbnailFileName}</if>
        <if test="nodes != null">, #{nodes,typeHandler=com.conwise.handler.JsonTypeHandler}</if>
        <if test="edges != null">, #{edges,typeHandler=com.conwise.handler.JsonTypeHandler}</if>
        <if test="settings != null">, #{settings,typeHandler=com.conwise.handler.JsonTypeHandler}</if>
        )
    </insert>


    <update id="update" parameterType="com.conwise.model.Canvas">
        UPDATE canvases
        SET
        <if test="title != null">
            title = #{title},
        </if>
        <if test="description != null">
            description = #{description},
        </if>
        <if test="settings != null">
            settings = #{settings,typeHandler=com.conwise.handler.JsonTypeHandler},
        </if>
        updated_at = CURRENT_TIMESTAMP
        WHERE
        id = #{id}
    </update>

    <delete id="deleteById">
        DELETE
        FROM
            canvases
        WHERE
            id = #{id}
    </delete>

    <insert id="insertCanvasNode">
        UPDATE canvases
        SET
            nodes=nodes || #{node}::jsonb
        WHERE
            id=
            #{canvasId}
    </insert>

    <delete id="deleteCanvasNode">
        UPDATE canvases
        SET
            nodes = COALESCE(
                    (SELECT
                         jsonb_agg(elem) -- 将过滤后的元素重新聚合成 JSONB 数组
                     FROM
                         jsonb_array_elements(nodes) AS elem -- 展开原 nodes 数组为单个元素
                     WHERE
                         elem ->> 'id' != #{nodeId} -- 过滤掉 id 匹配的元素（保留其他元素）
                    ), '[]' ::jsonb)
        WHERE
            id = #{canvasId}; -- 替换为目标行的 id
    </delete>

    <update id="updateCanvasNodeAttribute" parameterType="map">
        UPDATE canvases
        SET
            nodes = jsonb_set(
                    nodes,
                    #{path}::text[],
                    #{newValue}::jsonb,
                    TRUE
                    )
        WHERE
            id = #{canvasId};
    </update>

    <insert id="insertCanvasEdge">
        UPDATE canvases
        SET
            edges=edges || #{edge}::jsonb
        WHERE
            id=
            #{canvasId}
    </insert>

    <delete id="deleteCanvasEdge">
        UPDATE canvases -- 替换为实际表名
        SET
            edges = COALESCE(
                    (SELECT
                         jsonb_agg(elem) -- 将过滤后的元素重新聚合成 JSONB 数组
                     FROM
                         jsonb_array_elements(edges) AS elem -- 展开原 nodes 数组为单个元素
                     WHERE
                         elem ->> 'id' != #{edgeId} -- 过滤掉 id 匹配的元素（保留其他元素）

                    ), '[]' ::jsonb)
        WHERE
            id = #{canvasId}; -- 替换为目标行的 id（例如 2）
    </delete>
    <update id="updateCanvasEdgeAttribute" parameterType="map">
        UPDATE canvases
        SET
            edges = jsonb_set(
                    edges,
                    #{path}::text[],
                    #{newValue}::jsonb,
                    TRUE
                    )
        WHERE
            id = #{canvasId};
    </update>
    <update id="updateCanvasNodeAttributeWithNodeId">
        UPDATE canvases
        SET
            nodes = (
                -- 子查询：展开、过滤、修改后重新聚合数组
                SELECT
                    jsonb_agg(
                        -- 对匹配的元素修改属性，未匹配的保持原样
                            CASE
                                WHEN elem ->> 'id' = #{nodeId} THEN -- 目标 id（注意 JSON 中 id 是字符串还是数字？）
                                    jsonb_set(
                                            jsonb_set(
                                                elem,
                                                #{versionPath}::text[],  <!-- 第一个属性的路径 -->
                                                to_jsonb(#{newVersion}),  <!-- 第一个属性的新值 -->
                                                TRUE
                                            ),
                                            #{path}::text[], -- 修改路径 1：status 属性
                                            #{newValue}::jsonb, -- 新值（字符串需用双引号包裹）
                                            TRUE
                                    )
                                ELSE
                                    elem -- 未匹配的元素保持不变
                                END
                    )
                FROM
                    canvases,
                    jsonb_array_elements(nodes) AS elem -- 展开数组为行
                WHERE
                    id = #{canvasId})
        WHERE
            id = #{canvasId}; -- 指定要更新的表记录（根据实际需求调整）
    </update>
    <update id="updateCanvasEdgeAttributeWithEdgeId">
        UPDATE canvases
        SET
            edges = (
                -- 子查询：展开、过滤、修改后重新聚合数组
                SELECT
                    jsonb_agg(
                        -- 对匹配的元素修改属性，未匹配的保持原样
                            CASE
                                WHEN elem ->> 'id' = #{edgeId} THEN -- 目标 id（注意 JSON 中 id 是字符串还是数字？）
                                    jsonb_set(
                                            jsonb_set(
                                                elem,
                                                #{versionPath}::text[],  <!-- 第一个属性的路径 -->
                                                to_jsonb(#{newVersion}),  <!-- 第一个属性的新值 -->
                                                TRUE
                                            ),
                                            #{path}::text[], -- 修改路径 1：status 属性
                                            #{newValue}::jsonb, -- 新值（字符串需用双引号包裹）
                                            TRUE
                                    )
                                ELSE
                                    elem -- 未匹配的元素保持不变
                                END
                    )
                FROM
                    canvases,
                    jsonb_array_elements(edges) AS elem -- 展开数组为行
                WHERE
                    id = #{canvasId})
        WHERE
            id = #{canvasId}; -- 指定要更新的表记录（根据实际需求调整）
    </update>
</mapper>